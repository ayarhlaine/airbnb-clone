{"version":3,"sources":["Header/Header.jsx","Banner/Banner.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","React","useState","anchorEl","setAnchorEl","showHeader","setShowHeader","handleClose","changeHeader","showHeaderValue","useEffect","document","addEventListener","event","height","window","scrollY","removeEventListener","className","src","process","alt","Button","variant","IconButton","aria-haspopup","onClick","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","Banner","style","backgroundImage","App","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8WAyEeA,MAjEf,WAAmB,IAAD,EACkBC,IAAMC,SAAS,MADjC,mBACPC,EADO,KACGC,EADH,OAEsBH,IAAMC,UAAS,GAFrC,mBAEPG,EAFO,KAEKC,EAFL,KAGRC,EAAc,WAChBH,EAAY,OAKVI,EAAe,SAACC,GAClBH,EAAcG,IAelB,OAbAR,IAAMS,WAAU,WASZ,OARAC,SAASC,iBAAiB,UAAU,SAACC,GACjC,IAAMC,EAASC,OAAOC,QAElBR,EADDM,EAAS,QAMT,WACHH,SAASM,oBAAoB,aAEnC,IACEZ,EAEA,yBAAKa,UAAU,UACX,yBAAKA,UAAU,oBAAoBC,IAAG,UAAKC,gBAAL,oBAA+CC,IAAI,KACzF,yBAAKH,UAAU,gBACX,kBAACI,EAAA,EAAD,CAAQC,QAAQ,YAAYL,UAAU,gCAAtC,oBAEI,yBAAKA,UAAU,+BACX,kBAAC,IAAD,SAIZ,yBAAKA,UAAU,eACX,kBAACI,EAAA,EAAD,CAAQC,QAAQ,YAAYL,UAAU,sBAAtC,iBAGA,kBAACM,EAAA,EAAD,CAAYC,gBAAc,OAAOC,QAnCzB,SAACb,GACjBT,EAAYS,EAAMc,iBAmCN,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CACIC,GAAG,cACH1B,SAAUA,EACV2B,aAAW,EACXC,KAAMC,QAAQ7B,GACd8B,QAAS1B,GAET,kBAAC2B,EAAA,EAAD,CAAUR,QAASnB,GACf,kBAAC,IAAD,MADJ,WAIA,kBAAC2B,EAAA,EAAD,CAAUR,QAASnB,GACf,kBAAC,IAAD,MADJ,cA9BO,M,MCpBZ4B,MAXf,WACI,OACI,yBAAKjB,UAAU,SAASkB,MAAO,CAACC,gBAAgB,OAAD,OAASjB,gBAAT,yBAE3C,yBAAKF,UAAU,gBAAf,uB,MC4BGoB,MA7Bf,WACE,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,gDACA,kDCXcc,QACW,cAA7BjB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjC,SAASkC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1ce3ec64.chunk.js","sourcesContent":["import React from 'react';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport LanguageIcon from '@material-ui/icons/Language';\nimport { IconButton } from '@material-ui/core';\nimport './Header.scss';\nfunction Header() {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [showHeader, setShowHeader] = React.useState(false);\n    const handleClose = () => {\n        setAnchorEl(null);\n      };\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n    const changeHeader = (showHeaderValue) => {\n        setShowHeader(showHeaderValue)\n    };\n    React.useEffect(() => {\n        document.addEventListener('scroll', (event) => {\n            const height = window.scrollY;\n            if(height > 100) {\n                changeHeader(true);\n            } else {\n                changeHeader(false);\n            }\n        });\n        return () => {\n            document.removeEventListener('scroll');\n        }\n    },[]);\n    if(!showHeader) return null;\n    return (\n        <div className=\"header\">\n            <img className=\"header__logoImage\" src={`${process.env.PUBLIC_URL}/images/logo.png`} alt=\"\"/>\n            <div className=\"headerSearch\">\n                <Button variant=\"contained\" className=\"header__searchInputContainer\">\n                    Start your search\n                    <div className=\"header__searchIconContainer\">\n                        <SearchIcon />\n                    </div>\n                </Button>\n            </div>\n            <div className=\"headerRight\">\n                <Button variant=\"contained\" className=\"header__hostButton\">\n                    Become a host\n                </Button>\n                <IconButton aria-haspopup=\"true\" onClick={handleClick}>\n                    <LanguageIcon />\n                </IconButton>\n                <Menu\n                    id=\"simple-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                >\n                    <MenuItem onClick={handleClose}>\n                        <LanguageIcon />\n                        English\n                    </MenuItem>\n                    <MenuItem onClick={handleClose}>\n                        <LanguageIcon />\n                        Myanmar\n                    </MenuItem>\n                </Menu>\n            </div>\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport './Banner.scss';\nfunction Banner() {\n    return (\n        <div className=\"banner\" style={{backgroundImage: `url(${process.env.PUBLIC_URL}/images/banner.jpg)`}}>\n            {/* Banner Search */}\n            <div className=\"bannerSearch\">\n                Start your search\n            </div>\n        </div>\n    )\n}\n\nexport default Banner\n","import React from 'react';\nimport Header from './Header/Header';\nimport Banner from './Banner/Banner';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Banner />\n      <h1>Other Components</h1>\n      <h1>Other Components</h1>\n      <h1>Other Components</h1>\n      <h1>Other Components</h1>\n      <h1>Other Components</h1>\n      <h1>Other Components</h1>\n      <h1>Other Components</h1>\n      <h1>Other Components</h1>\n      <h1>Other Components</h1>\n      <h1>Other Components</h1>\n      <h1>Other Components</h1>\n      <h1>Other Components</h1>\n      <h1>Other Components</h1>\n      <h1>Other Components</h1>\n      {/* Banner */}\n      {/* Service */}\n      {/* Experience */}\n      {/* Destination */}\n      {/* Footer */}\n      {/* CopyRightLink */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}